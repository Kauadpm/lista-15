1. Classes e Objetos Básicos

Python:

class Carro:
 	def __init__(self, marca, modelo, ano):
 	self.marca = marca
 	self.modelo = modelo
 	self.ano = ano
	 def detalhes(self):
 	return f"Marca: {self.marca}, Modelo: {self.modelo}, Ano:
{self.ano}"
#Criando três objetos
	carro1 = Carro("Toyota", "Corolla", 2020)
	carro2 = Carro("Honda", "Civic", 2018)
	carro3 = Carro("Ford", "Focus", 2019)
#Exibindo detalhes
	print(carro1.detalhes())
	print(carro2.detalhes())
	print(carro3.detalhes())

Java:

public class Carro {
 	private String marca;
 	private String modelo;
 	private int ano;
 	public Carro(String marca, String modelo, int ano) {
 	this.marca = marca;
 	this.modelo = modelo;
 	this.ano = ano;
 }
 	public String detalhes() {
 	return "Marca: " + this.marca + ", Modelo: " + this.modelo +
", Ano: " + this.ano;
 }

 	public static void main(String[] args) {
 	Carro carro1 = new Carro("Toyota", "Corolla", 2020);
 	Carro carro2 = new Carro("Honda", "Civic", 2018);
 	Carro carro3 = new Carro("Ford", "Focus", 2019);
 	System.out.println(carro1.detalhes());
 	System.out.println(carro2.detalhes());
 	System.out.println(carro3.detalhes());
 }
}

Golang:

package main
import "fmt"
	type Carro struct {
	Marca string
	Modelo string
	Ano int
}

	func (c Carro) Detalhes() string {
	return fmt.Sprintf("Marca: %s, Modelo: %s, Ano: %d", c.Marca,
c.Modelo, c.Ano)

}

func main() {
	carro1 := Carro{"Toyota", "Corolla", 2020}
	carro2 := Carro{"Honda", "Civic", 2018}
	carro3 := Carro{"Ford", "Focus", 2019}
	fmt.Println(carro1.Detalhes())
	fmt.Println(carro2.Detalhes())
	fmt.Println(carro3.Detalhes())
}

2. Métodos (Acelerar e Frear)

Python:

class Carro:
 	def __init__(self, marca, modelo, ano):
 	self.marca = marca
 	self.modelo = modelo
 	self.ano = ano
 	self.velocidade = 0
 	def acelerar(self):
 	self.velocidade += 10
 	def frear(self):
 	if self.velocidade >= 10:
 	self.velocidade -= 10
	 def exibir_velocidade(self):
 	return f"Velocidade atual: {self.velocidade} km/h"

# Exemplo de uso

	carro1 = Carro("Toyota", "Corolla", 2020)
	carro1.acelerar()
	print(carro1.exibir_velocidade())
	carro1.frear()
	print(carro1.exibir_velocidade())

Java:

public class Carro {
 	private String marca;
 	private String modelo;
 	private int ano;
 	private int velocidade;
 	public Carro(String marca, String modelo, int ano) {
 	this.marca = marca;
 	this.modelo = modelo;
 	this.ano = ano;
 	this.velocidade = 0;
 }

 	public void acelerar() {
 	this.velocidade += 10;
 }
 	public void frear() {
 	if (this.velocidade >= 10) {
	 this.velocidade -= 10;
 }
 }
 	public String exibirVelocidade() {
 	return "Velocidade atual: " + this.velocidade + " km/h";
 }
 	public static void main(String[] args) {
 	Carro carro1 = new Carro("Toyota", "Corolla", 2020);
 	carro1.acelerar();
 	System.out.println(carro1.exibirVelocidade());
 	carro1.frear();
 	System.out.println(carro1.exibirVelocidade());
 }
}

Golang:

package main
import "fmt"
	type Carro struct {
	Marca string
	Modelo string
	Ano int
	Velocidade int
}
	func (c *Carro) Acelerar() {
	c.Velocidade += 10
}
	func (c *Carro) Frear() {
	if c.Velocidade >= 10 {
	c.Velocidade -= 10
}
}
	func (c Carro) ExibirVelocidade() string {
	return fmt.Sprintf("Velocidade atual: %d km/h", c.Velocidade)
}
func main() {
	carro1 := Carro{"Toyota", "Corolla", 2020, 0}
	carro1.Acelerar()
	fmt.Println(carro1.ExibirVelocidade())
	carro1.Frear()
	fmt.Println(carro1.ExibirVelocidade())
}

3. Encapsulamento (ContaBancaria)

Python:


class ContaBancaria:
 	def __init__(self, titular, saldo=0):
 	self.__titular = titular
 	self.__saldo = saldo
 	def depositar(self, valor):
	 self.__saldo += valor
 	def sacar(self, valor):
 	if valor <= self.__saldo:
	 self.__saldo -= valor
 	else:
	 print("Saldo insuficiente")
 	def exibir_saldo(self):
	 return f"Saldo atual: R${self.__saldo}"
# Exemplo de uso
	conta = ContaBancaria("João", 500)
	conta.depositar(100)
	print(conta.exibir_saldo())
	conta.sacar(200)
	print(conta.exibir_saldo())

Java:


public class ContaBancaria {
	 private String titular;
	 private double saldo;
 	public ContaBancaria(String titular, double saldo) {
 	this.titular = titular;
 	this.saldo = saldo;
 }
 	public void depositar(double valor) {
 	this.saldo += valor;
 }
 	public void sacar(double valor) {
 	if (valor <= this.saldo) {
 	this.saldo -= valor;
 } else {
 System.out.println("Saldo insuficiente");
 }
 }
 	public String exibirSaldo() {
 	return "Saldo atual: R$" + this.saldo;
 }
 	public static void main(String[] args) {
 	ContaBancaria conta = new ContaBancaria("João", 500);
 	conta.depositar(100);
 	System.out.println(conta.exibirSaldo());
 	conta.sacar(200);
 	System.out.println(conta.exibirSaldo());
 }
}
Golang:

package main
import "fmt"
	type ContaBancaria struct {
	titular string
	saldo float64
}
	func (c *ContaBancaria) Depositar(valor float64) {
	c.saldo += valor
}
	func (c *ContaBancaria) Sacar(valor float64) {
	if valor <= c.saldo {
	c.saldo -= valor
} else {
	fmt.Println("Saldo insuficiente")
}
}
	func (c ContaBancaria) ExibirSaldo() string {
	return fmt.Sprintf("Saldo atual: R$%.2f", c.saldo)
}
	func main() {
	conta := ContaBancaria{titular: "João", saldo: 500}
	conta.Depositar(100)
	fmt.Println(conta.ExibirSaldo())
	conta.Sacar(200)
	fmt.Println(conta.ExibirSaldo())
}

4. Herança

Python:

class Animal:
 	def som(self):
	 pass
	class Cachorro(Animal):
 	def som(self):
 	return "Latido"
	class Gato(Animal):
 	def som(self):
 	return "Miau"
# Exemplo de uso
	cachorro = Cachorro()
	gato = Gato()
	print(cachorro.som())
	print(gato.som())
	Java:
	java
	Copiar código
	class Animal {
 	public String som() {
	 return "";
 }
}
	class Cachorro extends Animal {
 @Override
 public String som() {
 return "Latido";
 }
}
class Gato extends Animal {
 @Override
 	public String som() {
 	return "Miau";
 }
}
public class Main {
 	public static void main(String[] args) {
 	Cachorro cachorro = new Cachorro();
 	Gato gato = new Gato();
 	System.out.println(cachorro.som());
 	System.out.println(gato.som());
 }
}

Golang:

package main
import "fmt"
	type Animal interface {
	Som() string
}
	type Cachorro struct{}
	func (c Cachorro) Som() string {
	return "Latido"
}
	type Gato struct{}
	func (g Gato) Som() string {
	return "Miau"
}
	func main() {
	cachorro := Cachorro{}
	gato := Gato{}
	fmt.Println(cachorro.Som())
	fmt.Println(gato.Som())
}

5. Polimorfismo

Python:


def fazer_som(animais):
	 for animal in animais:
 	print(animal.som())
# Exemplo de uso
	animais = [Cachorro(), Gato()]
	fazer_som(animais)

Java:

public class Main {
 	public static void fazerSom(Animal[] animais) {
 	for (Animal animal : animais) {
 	System.out.println(animal.som());
	 }
 }
 	public static void main(String[] args) {
 	Animal[] animais = {new Cachorro(), new Gato()};
 	fazerSom(animais);
 	}
}

Golang:

package main
import "fmt"
	func FazerSom(animais []Animal) {
	for _, animal := range animais {
	fmt.Println(animal.Som())
	}
}
	func main() {
	animais := []Animal{Cachorro{}, Gato{}}
	FazerSom(animais)
}

6. Composição

Python:

class Motor:
 	def __init__(self, potencia):
	 self.potencia = potencia
class Carro:
 	def __init__(self, marca, modelo, motor):
 	self.marca = marca
 	self.modelo = modelo
 	self.motor = motor
 	def detalhes(self):
 	return f"Carro: {self.marca}, {self.modelo}, Motor:
	{self.motor.potencia} HP"
# Exemplo de uso
	motor = Motor(150)
	carro = Carro("Toyota", "Corolla", motor)
	print(carro.detalhes())

Java:

class Motor {
 	private int potencia;
 	public Motor(int potencia) {
 	this.potencia = potencia;
 }
 	public int getPotencia() {
 	return this.potencia;
 	}
}
class Carro {
 	private String marca;
 	private String modelo;
 	private Motor motor;
 	public Carro(String marca, String modelo, Motor motor) {
 	this.marca = marca;
 	this.modelo = modelo;
 	this.motor = motor;
 }
 public String detalhes() {
 return "Carro: " + this.marca + ", " + this.modelo + ", Motor:
" + this.motor.getPotencia() + " HP";
 }
 public static void main(String[] args) {
 	Motor motor = new Motor(150);
 	Carro carro = new Carro("Toyota", "Corolla", motor);
 	System.out.println(carro.detalhes());
	 }
}
Golang:

package main
import "fmt"
	type Motor struct {
	Potencia int
}
	type Carro struct {
	Marca string
	Modelo string
	Motor Motor
}
	func (c Carro) Detalhes() string {
return fmt.Sprintf("Carro: %s, %s, Motor: %d HP", c.Marca,
c.Modelo, c.Motor.Potencia)
}
func main() {
	motor := Motor{150}
	carro := Carro{"Toyota", "Corolla", motor}
	fmt.Println(carro.Detalhes())
}

7. Associação

Python:

class Professor:
 	def __init__(self, nome):
	 self.nome = nome
class Escola:
 	def __init__(self, nome):
 	self.nome = nome
 	self.professores = []
 	def adicionar_professor(self, professor):
 	self.professores.append(professor)
# Exemplo de uso
	professor1 = Professor("Carlos")
	escola = Escola("Escola A")
	escola.adicionar_professor(professor1)
	print([prof.nome for prof in escola.professores])

Java:

import java.util.ArrayList;
import java.util.List;
	class Professor {
 	private String nome;
 	public Professor(String nome) {
 	this.nome = nome;
 }
 	public String getNome() {
 	return nome;
 	}
}
class Escola {
	 private String nome;
 	private List<Professor> professores = new ArrayList<>();
 	public Escola(String nome) {
 	this.nome = nome;
 	}

 	public void adicionarProfessor(Professor professor) {
 professores.add(professor);
 }
 	public List<Professor> getProfessores() {
 	return professores;
 }
 public static void main(String[] args) {
	 Professor professor1 = new Professor("Carlos");
 	Escola escola = new Escola("Escola A");
 	escola.adicionarProfessor(professor1);
 	for (Professor prof : escola.getProfessores()) {
 	System.out.println(prof.getNome());
	 }
 }
}
Golang:

package main
import "fmt"
	type Professor struct {
	Nome string
}
	type Escola struct {
	Nome string
	Professores []Professor
}
	func (e *Escola) AdicionarProfessor(professor Professor) {
e.Professores = append(e.Professores, professor)
}
	func main() {
	professor1 := Professor{"Carlos"}
	escola := Escola{Nome: "Escola A"}
	escola.AdicionarProfessor(professor1)
	for _, prof := range escola.Professores {
	fmt.Println(prof.Nome)
	}
}

8. Agregação

Python:

class Empregado:
 	def __init__(self, nome, cargo, salario):
 	self.nome = nome
 	self.cargo = cargo
 	self.salario = salario
class Empresa:
 	def __init__(self, nome):
 	self.nome = nome
 	self.empregados = []
 	def adicionar_empregado(self, empregado):
	 self.empregados.append(empregado)
# Exemplo de uso
	empregado1 = Empregado("João", "Desenvolvedor", 5000)
	empresa = Empresa("Empresa X")
	empresa.adicionar_empregado(empregado1)
	print([(emp.nome, emp.cargo) for emp in empresa.empregados])

Java:

import java.util.ArrayList;
import java.util.List;
class Empregado {
 	private String nome;
	 private String cargo;
	 private double salario;
	 public Empregado(String nome, String cargo, double salario) {
	 this.nome = nome;
	 this.cargo = cargo;
 	this.salario = salario;
 }
 	public String getNome() {
 	return nome;
 }
 	public String getCargo() {
 	return cargo;
 }
}
class Empresa {
 	private String nome;
 	private List<Empregado> empregados = new ArrayList<>();
 	public Empresa(String nome) {
 	this.nome = nome;
 }
 	public void adicionarEmpregado(Empregado empregado) {
 	empregados.add(empregado);
 }
	 public List<Empregado> getEmpregados() {
 	return empregados;
 }
	 public static void main(String[] args) {
	 Empregado empregado1 = new Empregado("João", "Desenvolvedor",
5000);
	 Empresa empresa = new Empresa("Empresa X");
	 empresa.adicionarEmpregado(empregado1);
 	for (Empregado emp : empresa.getEmpregados()) {
	 System.out.println(emp.getNome() + ", " + emp.getCargo());
 }
 }
}
Golang:

package main
import "fmt"
	type Empregado struct {
	Nome string
	Cargo string
	Salario float64
}
	type Empresa struct {
	Nome string
	Empregados []Empregado
}
	func (e *Empresa) AdicionarEmpregado(empregado Empregado) {
e.Empregados = append(e.Empregados, empregado)
}
	func main() {
	empregado1 := Empregado{"João", "Desenvolvedor", 5000}
	empresa := Empresa{Nome: "Empresa X"}
	empresa.AdicionarEmpregado(empregado1)
	for _, emp := range empresa.Empregados {
	fmt.Println(emp.Nome, emp.Cargo)
	}
}

9. Interfaces/Protocolos

Python:

from abc import ABC, abstractmethod
class Imprimivel(ABC):
 @abstractmethod
 def imprimir(self):
 pass
class Relatorio(Imprimivel):
	 def imprimir(self):
	 return "Imprimindo relatório..."
	class Contrato(Imprimivel):
 	def imprimir(self):
	 return "Imprimindo contrato..."
# Exemplo de uso
	documentos = [Relatorio(), Contrato()]
	for doc in documentos:
	 print(doc.imprimir())

Java (Interface):

interface Imprimivel {
 String imprimir();
}
	class Relatorio implements Imprimivel {
 	@Override
	 public String imprimir() {
 	return "Imprimindo relatório...";
 }
}
	class Contrato implements Imprimivel {
	 @Override
 	public String imprimir() {
 	return "Imprimindo contrato...";
	 }
}
	public class Main {
 	public static void main(String[] args) {
 	Imprimivel[] documentos = {new Relatorio(), new Contrato()};
 	for (Imprimivel doc : documentos) {
	 System.out.println(doc.imprimir());
	 }
 	}
}

Golang:

package main
import "fmt"
	type Imprimivel interface {
	Imprimir() string
}
	type Relatorio struct{}
	func (r Relatorio) Imprimir() string {
	return "Imprimindo relatório..."
}
	type Contrato struct{}
	func (c Contrato) Imprimir() string {
	return "Imprimindo contrato..."
}
func main() {
	documentos := []Imprimivel{Relatorio{}, Contrato{}}
	for _, doc := range documentos {
	fmt.Println(doc.Imprimir())
	}
}

10. Sobrecarga de Métodos

Python:

class Calculadora:
 	def somar(self, *args):
 	return sum(args)
# Exemplo de uso
	calc = Calculadora()
	print(calc.somar(2, 3))
	print(calc.somar(2, 3, 4))

Java:

class Calculadora {
 	public int somar(int a, int b) {
 	return a + b;
 }
 	public int somar(int a, int b, int c) {
 	return a + b + c;
 }
	public static void main(String[] args) {
 	Calculadora calc = new Calculadora();
 	System.out.println(calc.somar(2, 3));
 	System.out.println(calc.somar(2, 3, 4));
 	}
}
Golang:

package main
import "fmt"
	func SomarDois(a int, b int) int {
	return a + b
}
	func SomarTres(a int, b int, c int) int {
	return a + b + c
}
	func main() {
	fmt.Println(SomarDois(2, 3))
	fmt.Println(SomarTres(2, 3, 4))
}

11. Classes Abstratas

Python:

from abc import ABC, abstractmethod
class Funcionario(ABC):
 	@abstractmethod
 	def calcular_salario(self):
 	pass
class FuncionarioHorista(Funcionario):
 	def __init__(self, horas, valor_hora):
 	self.horas = horas
	 self.valor_hora = valor_hora
 	def calcular_salario(self):
 	return self.horas * self.valor_hora
class FuncionarioAssalariado(Funcionario):
 	def __init__(self, salario_fixo):
 	self.salario_fixo = salario_fixo
 	def calcular_salario(self):
 	return self.salario_fixo
# Exemplo de uso
	horista = FuncionarioHorista(160, 50)
	assalariado = FuncionarioAssalariado(5000)
	print(horista.calcular_salario())
	print(assalariado.calcular_salario())

Java:

abstract class Funcionario {
 	public abstract double calcularSalario();
}
class FuncionarioHorista extends Funcionario {
 	private int horas;
	 private double valorHora;
	 public FuncionarioHorista(int horas, double valorHora) {
	 this.horas = horas;
 	this.valorHora = valorHora;
 }
 @Override
	 public double calcularSalario() {
	 return horas * valorHora;
 }
}
class FuncionarioAssalariado extends Funcionario {
	 private double salarioFixo;
 	public FuncionarioAssalariado(double salarioFixo) {
 	this.salarioFixo = salarioFixo;
 }
 @Override
	 public double calcularSalario() {
 	return salarioFixo;
 }
 	public static void main(String[] args) {
 	Funcionario horista = new FuncionarioHorista(160, 50);
 	Funcionario assalariado = new FuncionarioAssalariado(5000);
 	System.out.println(horista.calcularSalario());
 	System.out.println(assalariado.calcularSalario());
 }
}
Golang:

package main
import "fmt"
	type Funcionario interface {
	CalcularSalario() float64
}
	type FuncionarioHorista struct {
	Horas int
	ValorHora float64
}
func (f FuncionarioHorista) CalcularSalario() float64 {
	return float64(f.Horas) * f.ValorHora
	}
type FuncionarioAssalariado struct {
	SalarioFixo float64
	}
func (f FuncionarioAssalariado) CalcularSalario() float64 {
	return f.SalarioFixo
	}
func main() {
	horista := FuncionarioHorista{160, 50}
	assalariado := FuncionarioAssalariado{5000}
	fmt.Println(horista.CalcularSalario())
	fmt.Println(assalariado.CalcularSalario())
}

12. Sobrecarga de Operadores

Python:

class Produto:
 	def __init__(self, nome, preco):
 	self.nome = nome
 	self.preco = preco
 	def __add__(self, outro):
	 return self.preco + outro.preco
# Exemplo de uso
	produto1 = Produto("Produto 1", 100)
	produto2 = Produto("Produto 2", 150)
	print(produto1 + produto2) # Saída: 250

Java:

class Produto {
 	private String nome;
	 private double preco;
 	public Produto(String nome, double preco) {
 	this.nome = nome;
	 this.preco = preco;
 }
 public double somar(Produto outro) {
 	return this.preco + outro.preco;
 	}
 	public static void main(String[] args) {
 	Produto produto1 = new Produto("Produto 1", 100);
 	Produto produto2 = new Produto("Produto 2", 150);
 	System.out.println(produto1.somar(produto2)); // Saída: 250
 	}
}
Golang:

package main
import "fmt"
	type Produto struct {
	Nome string
	Preco float64
}
	func SomarProduto(p1, p2 Produto) float64 {
	return p1.Preco + p2.Preco
	}
func main() {
	produto1 := Produto{"Produto 1", 100}
	produto2 := Produto{"Produto 2", 150}
	fmt.Println(SomarProduto(produto1, produto2)) // Saída: 250
}

13. Métodos Estáticos

Python:

class Matematica:
 	@staticmethod
 	def fatorial(n):
 	if n == 0 or n == 1:
	 return 1
 	return n * Matematica.fatorial(n - 1)
# Exemplo de uso
	print(Matematica.fatorial(5)) # Saída: 120

Java:

class Matematica {
 	public static int fatorial(int n) {
 	if (n == 0 || n == 1) {
 	return 1;
	 }
 	return n * fatorial(n - 1);
	 }
	 public static void main(String[] args) {
	 System.out.println(Matematica.fatorial(5)); // Saída: 120
	 }
}

Golang:

package main
import "fmt"
	func Fatorial(n int) int {
	if n == 0 || n == 1 {
	return 1
	}
return n * Fatorial(n-1)
}
	func main() {
	fmt.Println(Fatorial(5)) // Saída: 120
}

14. Singleton

Python:

class Configuracao:
 	_instancia = None
	 def __new__(cls):
 	if cls._instancia is None:
 	cls._instancia = super(Configuracao, cls).__new__(cls)
 	return cls._instancia
# Exemplo de uso
	config1 = Configuracao()
	config2 = Configuracao()
	print(config1 is config2) # Saída: True (mesma instância)

Java:

class Configuracao {
 	private static Configuracao instancia;
	private Configuracao() {}
 	public static Configuracao getInstancia() {
	 if (instancia == null) {
	 instancia = new Configuracao();
 }
 	return instancia;
 }
 public static void main(String[] args) {
	 Configuracao config1 = Configuracao.getInstancia();
	Configuracao config2 = Configuracao.getInstancia();
	 System.out.println(config1 == config2); // Saída: true (mesma
instância)
 	}
}
Golang:

package main
import "sync"
	var (
	instance *Configuracao
once sync.Once
)
	type Configuracao struct{}
	func GetInstancia() *Configuracao {
once.Do(func() {
	instance = &Configuracao{}
})
return instance
}
func main() {
	config1 := GetInstancia()
	config2 := GetInstancia()
	fmt.Println(config1 == config2) // Saída: true (mesma
instância)
}

15. Exceções/Erros Personalizados

Python:

class SaldoInsuficienteException(Exception):
 	pass
class ContaBancaria:
	 def __init__(self, saldo):
	 self.saldo = saldo
 	def sacar(self, valor):
 	if valor > self.saldo:
	 raise SaldoInsuficienteException("Saldo insuficiente")
 	self.saldo -= valor
# Exemplo de uso
	conta = ContaBancaria(100)
	try:
 	conta.sacar(200)
	except SaldoInsuficienteException as e:
 print(e)

Java:

class SaldoInsuficienteException extends Exception {
 	public SaldoInsuficienteException(String mensagem) {
 super(mensagem);
 }
}
class ContaBancaria {
 	private double saldo;
 	public ContaBancaria(double saldo) {
 	this.saldo = saldo;
 }
 public void sacar(double valor) throws SaldoInsuficienteException
{
 	if (valor > saldo) {
 	throw new SaldoInsuficienteException("Saldo
insuficiente");
 }
	 saldo -= valor;
 }
 	public static void main(String[] args) {
 	ContaBancaria conta = new ContaBancaria(100);
 try {
 	conta.sacar(200);
 } catch (SaldoInsuficienteException e) {
 System.out.println(e.getMessage());
	 }
 	}
}

Golang:

package main
import (
"errors"
"fmt"
)
type ContaBancaria struct {
Saldo float64
}
func (c *ContaBancaria) Sacar(valor float64) error {
if valor > c.Saldo {
return errors.New("Saldo insuficiente")
}
c.Saldo -= valor
return nil
}
func main() {
conta := ContaBancaria{100}
err := conta.Sacar(200)
if err != nil {
fmt.Println(err)
}
}







